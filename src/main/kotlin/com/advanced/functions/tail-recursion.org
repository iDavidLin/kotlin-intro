#+TITLE:Tail Recursion
* What is tail recursion?
** Traditional recursion
In *traditional recursion*, the typical model is that you perform your recursive calls first, and then you take the return value of the recursive call and calculate the result. In this manner, you don't get the result of your calculation until you have returned from every recursive call.

#+begin_src kotlin
fun factorial(number: Int): Int {
    return when (number) {
        0, 1 -> 1
        else -> number * factorial(number - 1)
    }
}
#+end_src

Imaging you call the =factorial= function with a big number =1000000= and how much memory it will use.
#+begin_src kotlin
factorial 1000000 = 1000000 * factorial 999999
                    1000000 * (999999 * factorial 999998)
                    1000000 * (999999 * (999998 * factorial 999997)
                               ...
#+end_src

** Tail recursion
In tail recursion, you perform your calculations first, and then you execute the recursive call, passing the results of your current step to the next recursive step. This results in the last statement being in the form of (return (recursive-function params)). Basically, the return value of any given recursive step is the same as the return value of the next recursive call.

#+begin_src kotlin
tailrec fun factorialTR(number: Int, accumulator: Int = 1): Int {
    return when (number) {
        0 -> accumulator
        else -> factorialTR(number - 1, accumulator * number)
    }
}
#+end_src

In other word, you don't need to remember your current stack frame any more. This allows for some optimization. In fact, with an appropriately written compiler, you should never have a stack overflow snicker with a tail recursive call. Simply reuse the current stack frame for the next recursive step.
